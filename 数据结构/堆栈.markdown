# 一、堆栈
堆栈（Stack）：具有一定操作约束的线性表

* 只在一端（栈顶 TOP）做插入，删除

* 后进后出
### 堆栈的抽象数据类型描述
数据对象集： 一个含有0或多个元素的有穷线性表

操作集：长度为MaxSize的堆栈S ∈Stack,堆栈元素item∈ElementType

1. Stack CreateStack (int MaxSize) :生成空堆栈，其最大程度为MaxSize
2. int IsFull(Stack S,int MaxSize) :判断堆栈S是否已满
3. void Push(Stack S,ElementType item)：将元素item压入堆栈
4. int IsEmpty(Stack S)：判断堆栈S是否为空
5. ElementType Pop(Stack S)：删除并返回栈顶元素

# 二、栈的顺序存储实现
栈的顺序存储结构通常由一个*一维数组* 和一个记录 *栈顶* 元素位置的变量组成
```
#define MaxSize<储存数据元素的最大个数>
typedef struct SNode* Stack;
struct SNode{
    ElementType Data[MaxSize];
    int Top;
};
```
## 1. 入栈
```
void Push(Stack PtrS,ElementType item)
{
    if(PtrS->Top==MaxSize-1)
    {
        printf("堆栈满");
        return;
    }
    else{
    PtrS->Data[++(PtrS->Top)]=item;
    return;
    }
}
```
## 2. 出栈
```
ElementType Pop(Stack PtrS)
{
    if(PtrS->Top==-1)
    {
        printf("堆栈空");
        return ERROR; 
        /*ERROR是ElementType特殊值，标志错误*/
    }
    else
        return (PtrS->Data[(PtrS->Top)--]);
}
```
## 【例题】
请用一个数组实现两个堆栈，要求最大地利用数组空间，使数组只要有空间入栈操作就可以成功

【分析】：聪明的方法是使这两个二栈分别从数组地 **两头开始向中间生长** ；当两个栈 **栈顶指针相遇** 时，表示两个栈满
```
#define MaxSize<存储数据元素的最大个数>
struct DStack
{
    ElementType Data[MaxSize];
    int Top1; /*堆栈1的栈顶指针*/
    int Top2; /*堆栈2的栈顶指针*/
}S;
S.Top1=-1;
S.Top2=MaxSize;
```
入栈
```
void Push(ElementType item,DStack *PtrS,int Tag)
{
    /*Tag作为区分两个堆栈的标志，取值为1或2*/
    if(PtrS->Top2-PtrS->Top1==1)
    {
        printf("堆栈满");return;
    }
    else
    {
        if(Tag==1)
            PtrS->Data[++(PtrS->Top1)]=item;
        else
            PtrS->Data[--(PtrS->Top2)]=item;
    }
}
```
出栈
```
ElementType Pop(DStack *PtrS,int Tag)
{
    if(Tag==1)
    {
        if(PtrS->Top1==-1)
        {printf("堆栈1空");return ERROR;}
        else
            return (PtrS->Data[(PtrS->Top1)--]);
    }
    else 
    {
        if(Ptrs->Top2==MaxSize)
        {printf("堆栈2空");return ERROR;}
        else 
            return (PtrS->Data[(PtrS->Top2)++]);
        
    }
}
```
# 三、栈的链式存储实现
栈的链式存储结构实际上时一个**单链表**，叫做**链栈**。插入和删除操作只能在链栈的栈顶进行。

栈顶指针Top在链表**head**头指针
```
typedef struct SNode *Stack;
struct SNode
{
    ElementType Data;
    SNode *next;
};
```
## 1. 堆栈初始化（建立空栈）
```
Stack CreateStack()
{ 
    //构建一个堆栈的头结点，返回指针
    Stack S;
    S=new SNode;
    S->next=NULL;
    return s;
}
```
## 2. 判断堆栈是否为空
```
int IsEmpty(Stack S)
{
    //判断堆栈是否为空，若为空函数则返回1，否则返回0
    //后面没结点，就是空的
    return (S->next==NULL);
}
```
## 3. 入栈
![](image/QQ%E5%9B%BE%E7%89%8720230802174720.png)
```
void Push(ElementType item,Stack S)
{
    //将元素item压入堆栈S中
    SNode *TmpCell;
    TmpCell=new SNode;
    TmpCell->Data=item;
    TmpCell->next=S->next;
    S->next=TmpCell;
}
```
## 4. 出栈
![](image/QQ%E5%9B%BE%E7%89%8720230802174731.png)
```
ElementType Pop(Stack S)
{
    SNode *FirstCell;
    ElementType TopElem;
    if( IsEmpty(S))
    {
        printf("栈空");return NULL;
    }
    else
    {
        FirstCell=S->next;
        S->next=FirstCell->next;
        TopElem=FirstCell->Data;
        delete FirstCell;
        return TopElem;
    }
}
```
# 四、堆栈的其他应用
1. 表达式求值
![](image/QQ%E5%9B%BE%E7%89%8720230802175850.jpg)

2. 函数调用和递归实现
3. 深度优先搜索
4. 回溯算法