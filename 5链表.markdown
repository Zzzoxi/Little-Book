
```
#include<iostream>
using namespace std;
struct node
{
	int data;
	node* next;
};
```
# 1.1建立单向链表
（挂在后面）

```
void Create_after(node* &head)  //使用指针的引用参数
{
	node* s, * p;
	s = new node;
	cin >> s->data;
	s->next = NULL;
	while (s->data!=0)
	{
		if (head == NULL)        //记得是==
			head = s;
		else p->next = s;
		p = s;
		s = new node;
		cin >> s->data;
	}
	p->next = NULL;
	delete s;
	return;
}
```
1.2建立链表（挂在前面）
```
void Create_before(node*& head)    //使用指针的引用参数
{
	node* s, * p;
	s = new node;
	cin >> s->data;
	s->next = NULL;
	while (1)
	{
		p = s;
		s = new node;
		cin >> s->data;
		s->next = p;
		if (s->data == 0)
		{
			head = s->next;
			break;
		}
	}
}
```
# 2.遍历链表 
从头指针开始逐个输出，直到指针为空
```
void showlist(node* head)
{
	cout << "now the items of node are :\n";
	while (head)
	{
		cout << head->data << '\t';
		head = head->next;
	}
	cout << endl;
}
```
主函数调用上述函数
```
int main()
{
	node* head = NULL;
	Create_after(head);
	showlist(head);
	head = NULL;
	Create_before(head);
	showlist(head);
	return 0;
}
/*
运行效果如下：
1 2 3 4 0
now the items of node are :
1       2       3       4
4 5 6 7 0
now the items of node are :
7       6       5       4
可以作为逆序输出，挂在前面很有用
*/
```
# 3.插入结点
```
node *s;
s=new node;
cin>>s->data;//生成新节点
```
### (1)在表头插入节点
```
s->next=head;
head=s;
```
### (2)在*p后插入节点
```
//需要先找到*P的位置
s->next=p->next;
p->next=s;
```
### (3)在*p前插入节点
```
//双节点扫,q为p的前一个结点
s->next=p;
q->next=s;
```
### eg.用插入法生成一个有序链表
```
#include<iostream>
using namespace std;
struct node
{
	int data;
	node* next;
};
void insert(node* &head,int num)             //记得引用参数 & head
{
	node* s,*p,*q;
	s = new node;
	s->data = num;
	s->next = NULL;
	if (head == NULL)
	{
		head = s; return;            //若表空，则建立一个结点的链表
	}
	if (num < head->data)
	{
		s->next = head;
		head = s;
		return;                //若输入的数据是最小值，则在最前面
	}
	for (q = head, p = head->next; p; p = p->next, q = q->next)
	{
		if (num < p->data)                         //搜索插入
		{
			q->next = s;
			s->next = p;
			return;      
		}
	}
	q->next = s;                    //若被插数据最大，插入表尾
	return;
}
void showlist(const node* head)
{
	while (head)
	{
		cout << head->data << '\t';
		head = head->next;
	}
	cout << endl;
}
int main()
{
	cout << "Input the number until 0." << endl;
	node* head = NULL;
	int num;
	cin >> num;
	while (num != 0)
	{
		insert(head, num);
		cin >> num;
	}
	showlist(head);
	return 0;
}
```
# 4.删除结点
删除结点也要根据结点的位置进行不同处理，还要注意  *释放被删结点*。
### （1）删除头节点
```
node *p;
p=head;
head=head->next;
delete p;
```
### (2) 删除*p
q为p的前驱结点
```
q->next=p->next;
delete p;
```
### eg.从链表中删除等于key的结点
```
void del(node*& head,int key)
{
	if (!head)
	{
		cout << "List null!\n"; return;
	}
	if (key == head->data)
	{
		node* s;
		s = head;
		head = head->next;
		delete s; s = NULL; 
		return;
	}
	node* p, * q;
	for (p = head->next, q = head; p; q = p, p = p->next)
	{
		if (p->data == key)
		{
			q->next = p->next;
			delete p; p = NULL;
			return;
		}
	}
		cout << "There is no key : " << key << endl;
}
```
## Josephus环游戏
```

```

# C++大作业
## 题目二: 长整数、高精度运算
 
一、问题描述：
设计一个程序实现两个任意长的整数（包括正数和负数）、任意精度实数的算术运算。
 
二、提示：
（1）用动态链表存贮数据，每结点含一个整型变量，表示若干位数。
（2）整数输入和输出按中国对于长整数的习惯表示，每3位1组，组间用逗号隔开。
（3）实现长整数的加、减运算。
（4）程序运行界面清晰实用。

```
#include<iostream>
#include<iomanip>
using namespace std;
struct node
{
	int num1;
	node* next;
};
struct list
{
	int num2;
	list* next;
};
struct answer
{
	int data;
	answer* next;
	answer* before;
};
int sign1 = 1, sign2 = 1, flag, key = 1, a = 0;
int create_num1(node*& head);
void  create_num2(list*& head);
void create_ans(answer*& head,node*head1,list *head2)
{
	answer* a, * p;
	a = new answer;
	a->next = NULL;
	p = a;
	node* n = head1;
	list* l = head2;
	a->data = n->num1 + l->num2;
	while (1)
	{
		if(n)n = n->next;
		if(l)l = l->next;
		p = a;
		a = new answer;
		a->next = p;
		p->before = a;
		if (n && l)
			a->data = n->num1 + l->num2;
		if (!n && l)
			a->data = l->num2;
		if (n && !l)
			a->data = n->num1;
		if (!n && !l)
		{
			head = p;
			break;
		}
	}
}
void change(answer*& head)
{
	while (!head->data && head->next)
	{
		head = head->next;
	}//去掉前面的0
	answer* p = head;
	answer* q = head; 
	if (p->data < 0)
	{
		key = -1;
		while (p)
		{
			p->data *= (-1);
			p = p->next;
		}
	}
	while (q->next)
		q = q->next;//找到最后一个结点

	while (q!=head)
	{
		if (q->data < 0)
		{
			q->data += 1000;
			q->before->data -= 1;
		}
		if (q->data >= 1000)
		{
			q->data -= 1000;
			q->before->data += 1;
		}
		q = q->before;
	}
}
void showlist(answer* head)
{
	if (!head->next && head->data<1000) //如果答案小于1000，则直接输出；
	{
		cout << head->data << endl;
		return;
	}
	if (head->data >= 1000)
	{
		cout << (head->data) / 1000 << ",";
		head->data %= 1000;
		cout << setw(3) << setfill('0') << head->data ;
		if (head->next)cout << ',';
		else { cout << endl; return; }
		head = head->next; a = 1;
	}
	if (!a )
		cout << head->data << ',', head = head->next;
	while (head->next)
	{
		cout << setw(3) << setfill('0') << head->data << ',';
		head = head->next;
	}
	cout << setw(3) << setfill('0') << head->data << endl;
	
	
}
int main()
{
	cout << "本程序用于计算两个两个任意长的整数（包括正数和负数）、任意精度实数的加法或减法运算\n";
	cout << "格式要求：请先输入第一个整数，输入+/-，再输入第二个整数，最后输入= \n" << "（整数输入和输出按中国对于长整数的习惯表示，每3位1组，组间用逗号隔开。）\n";
	cout << "示例输入如： 123,456+123,456=  \n";
	cout << endl;
	char ask = 'Y';
	while (ask=='Y')
	{
		sign1 = 1, sign2 = 1, flag=0, key = 1,a=0;
		node* head1 = NULL;
		list* head2 = NULL;
		answer* head3 = NULL;
		flag = create_num1(head1);
		create_num2(head2);
		create_ans(head3, head1, head2);
		change(head3);
		if (key == -1)cout << '-';
		showlist(head3);
		cout << "\n\n是否想要继续输入进行计算 Y/N \n";
		cin >> ask;
	}
	return 0;
}
int create_num1(node*& head)
{
	node* s, * p;
	s = new node;
	cin >> s->num1;
	if (s->num1 < 0)sign1 = -1;
	s->next = NULL;
	char symbol;
	cin >> symbol;
	while (1)
	{
		if (symbol == '+')
		{
			head = s; return 1;
		}
		if (symbol == '-')
		{
			head = s; return -1;
		}
		p = s;
		s = new node;
		cin >> s->num1;
		s->num1 *= sign1;
		s->next = p;
		cin >> symbol;
		
	}
}
void  create_num2(list*& head)
{
	list* s, * p;
	s = new list;
	cin >> s->num2;
	if (s->num2 < 0)sign2 = -1;
	s->num2 *= flag;
	s->next = NULL;
	char symbol;
	cin >> symbol;
	while (1)
	{
		if (symbol != ',')
		{
			head = s;
			break;
		}
		p = s;
		s = new list;
		cin >> s->num2;
		s->num2 *= sign2;
		s->num2 *= flag;
		s->next = p;
		cin >> symbol;
		
	}
}
```
8分）本程序功能是把一个用拼音输入的名字自动生成6位数字串的密码。生成规则是把字母串的最后6位逆序，取每个字母小写的ASCII码值，其除以10的余数为该位的密码值。当输入名字的字母串不足6位，生成时以字母“z”补足。图4是程序的运行效果。请填写change函数的函数原型并编写函数。

EG：//请输入名字拼音，以#结束：

ZhongFuWa#

生成密码为：

797230#

```

#include<iostream.h>
#include<ctype.h>
struct link {char s; link * next;};
void inputName(link *& h);
void outLink(link *h);
void change(link *&hCode, link *h);   //change的函数原型

void main()
{ link *name=NULL, *code=NULL;
  cout<<"请输入名字拼音,以#结束:\n";   
inputName(name);
  change(code,name);
  cout<<"生成密码为:\n";
outLink(code);
}

void inputName(link *& h)		//逆序存放字符串
{ link *p;
  p=new link;    cin>>(p->s);
  while((p->s>='a'&&p->s<='z'||p->s>='A'&&p->s<='Z')&&p->s!='#')
  { p->next=h;   h=p;
	   p=new link;  cin>>(p->s);
  }
}

void change(link *&hCode, link *h)
{ char d;
  link *p=NULL;
  hCode=new link;
  hCode->next=NULL;
  p=hCode;
  d=h->s;
	for(int i=0;i<6;i++)
	{ p->s=int(tolower(d))%10+'0';
	  p->next=new link;
	  p=p->next;
	  p->s='#';
	  p->next=NULL;
	  if(h->next)
		{h=h->next; d=h->s;}
	  else d='z';
	}
}

void outLink(link *h)
{ while(h)	{cout<<(h->s); h=h->next;}
  cout<<endl;
}

```
实现字母大小写转换
```
#include<cctype>

char s=tolower(p);  //全改为小写
char a=toupper(p);  //全改为大写

函数原型
int tolower(int c)           //改为小写
{
	if((c>='A)&&(c<='Z'))
	   return c+('a'-'A');
	else  return c;
}
int toupper(int c)       //改为大写
{
	if((c>='a')&&(c<='z'))
	  return c+'A'-'a';
	else return c;
}
```

### 类模板的链表
1．	建立结点，包括一个任意类型数据域和一个指针域的单向链表类模板。在main函数中使用该类模板建立数据域为整型的单向链表，并把链表中的数据显示出来。
```
#include<iostream>
using namespace std;
template<typename T>
struct node
{
	T data;
	node* next;
};
template<typename T>
void create_list(node<T> *&head)
{
	node<T>* s;
	node<T>* p;
	s = new node<T>;
	cin >> s->data;
	s->next = NULL;
	p = s;
	while (s->data!=0)
	{
		if (head == NULL)
		{
			head = s;
		}
		else p->next = s;
		p = s;
		s = new node<T>;
		cin >> s->data;
	}
	p->next = NULL;
	delete s;

}
template<typename T>
void showlist(node<T>* head)
{
	while (head)
	{
		cout << head->data << " ";
		head = head->next;
	}
	cout << endl;
}
int main()
{
	node<double>* head=NULL;
	create_list(head);
	showlist(head);
	return 0;
}
```